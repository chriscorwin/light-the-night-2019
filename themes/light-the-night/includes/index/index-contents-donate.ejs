<div id="trophy-gold_wrapper">
<%- include(`images/donate--awards-gold.svg`) %>
</div>



<div id="fundrasing-progress_wrapper">
  <div id="fundrasing-progress"  class="ltn-grid ltn-wrap">
    <div class="ltn-col ltn-size_1-of-1 ltn-large-size_6-of-12">
    <div id="trophy-silver_wrapper" class="donate-place-card">
      <%- include(`images/donate--awards_cards--silver.svg`) %>
    </div>
    </div>
    <div class="ltn-col ltn-size_1-of-1 ltn-large-size_6-of-12">
      <div id="trophy-bronze_wrapper" class="donate-place-card">
        <%- include(`images/donate--awards_cards--bronze.svg`) %>
      </div>
    </div>
  </div>
</div>



<%



function formatMoney(amount, decimalCount = 2, decimal = ".", thousands = ",") {
  try {
    decimalCount = Math.abs(decimalCount);
    decimalCount = isNaN(decimalCount) ? 2 : decimalCount;

    const negativeSign = amount < 0 ? "-" : "";

    let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
    let j = (i.length > 3) ? i.length % 3 : 0;

    return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
  } catch (e) {
    console.log(e)
  }
};



// Columns from the CSV
const amountIdx = 5;
const cityIdx = 8;
const stateIdx = 9;
let totalAmountRaised = 0.0;
let goalToRaise = 1000000.0;
let percentageOfGoalRaised = 0;
// An object with city names as the key for easy accumulation by city
const citySums = localization.contestData.slice(1).reduce(
    (cities, row) => {
        const city = row[cityIdx];
        const abbr = row[stateIdx];
        const state = localization.abbToName(abbr);
        const amount = row[amountIdx];
        if (!cities[city]) cities[city] = { state: state, amount: 0 };
        cities[city].amount += parseFloat(amount);
        totalAmountRaised += parseFloat(amount);
        return cities
    },
    {}
);

percentageOfGoalRaised = Math.floor((totalAmountRaised / goalToRaise) * 100);
console.log(`percentageOfGoalRaised: `, percentageOfGoalRaised);
console.log(`goalToRaise: `, goalToRaise);
console.log(`totalAmountRaised: `, totalAmountRaised);

/*
   An array of objects, sorted by their amount descending.  The objects look like this:
    {
       city: string,
       state: string, // postal abbreviation, like IN or CA
       amount: number
    }
*/
const mergeCityName = ([city, data]) => Object.assign(data, { city });
const descendingSorter = (l, r) => l.amount < r.amount ? 1 : -1;
const cities = Object.entries(citySums).map(mergeCityName).sort(descendingSorter);
%>
<script>
  const citiesDescendingOrder = <%- JSON.stringify(cities, null, 2); %>;


</script>

<!-- City Data, printed out for dev convenience
<%- JSON.stringify(cities, null, 2); %>
-->

<%- include(`includes/${locals.urlSlug}/${locals.urlSlug}-contents-donate-table`, {'citiesDescendingOrder': cities, formatMoney}) _%>


<div class="ltn-progress-bar_wrapper">
  <h2><%- localization.content.donationProgressHeading %></h2>

  <div class="ltn-progress-bar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="<%- `${percentageOfGoalRaised}`%>" role="progressbar">
    <span class="ltn-progress-bar__value" style="width:<%- `${percentageOfGoalRaised}`%>%">
      <span class="ltn-assistive-text">Progress: <%- `${percentageOfGoalRaised}`%>%</span>
    </span>
  </div>
  <p class="ltn-donation-progress">
    $<%- `${formatMoney(totalAmountRaised)}` %> / $1,000,000
  </p>
</div>